{"version":3,"sources":["AudioPlane.js","App.js","reportWebVitals.js","index.js"],"names":["audioCtx","AudioContext","analyser","createAnalyser","audioData","Uint8Array","frequencyBinCount","navigator","mediaDevices","getUserMedia","audio","then","stream","createMediaStreamSource","connect","uniforms","iTime","value","iResolution","THREE","iChannel0","fftSize","iChannel1","iChannel2","iChannel3","AudioPlane","forwardRef","refPlane","shader","resize","canvas","document","getElementById","set","offsetWidth","offsetHeight","useEffect","window","addEventListener","useFrame","getByteFrequencyData","current","material","needsUpdate","ref","args","fragmentShader","App","visualNumber","useRef","useState","setShader","getVisual","n","a","fetch","headers","Accept","response","json","data","changeVisual","e","newNumber","parseInt","target","sleep","ms","Promise","resolve","setTimeout","rapidChange","previousShader","i","getInitialShader","initialShader","id","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.04c56577.chunk.js","sourcesContent":["import { useEffect, forwardRef } from \"react\"\nimport * as THREE from \"three\"\nimport { useFrame } from \"@react-three/fiber\"\nimport { Plane } from \"@react-three/drei\"\n\nconst audioCtx = new AudioContext()\nconst analyser = audioCtx.createAnalyser()\nconst audioData = new Uint8Array(analyser.frequencyBinCount)\nnavigator.mediaDevices.getUserMedia({audio: true})\n    .then(stream => {\n    const source = audioCtx.createMediaStreamSource(stream)\n    source.connect(analyser)\n    })\n\nconst uniforms = {\n    iTime: { value: 0 },\n    iResolution: { value: new THREE.Vector3() },\n    iChannel0: {\n        value: new THREE.DataTexture(\n        audioData,\n        analyser.fftSize / 8,\n        1,\n        THREE.LuminanceFormat\n        )\n    },\n    iChannel1: {\n        value: new THREE.DataTexture(\n        audioData,\n        analyser.fftSize / 8,\n        1,\n        THREE.LuminanceFormat\n        )\n    },\n    iChannel2: {\n        value: new THREE.DataTexture(\n        audioData,\n        analyser.fftSize / 8,\n        1,\n        THREE.LuminanceFormat\n        )\n    },\n    iChannel3: {\n        value: new THREE.DataTexture(\n        audioData,\n        analyser.fftSize / 8,\n        1,\n        THREE.LuminanceFormat\n        )\n    }\n    }\n\nconst AudioPlane = forwardRef(({shader}, refPlane) => { \n    const resize = () => {\n      const canvas = document.getElementById('fiberCanvas')\n      uniforms.iResolution.value.set(canvas.offsetWidth, canvas.offsetHeight, 1)\n    }\n  \n    useEffect(() => { \n      resize()\n      window.addEventListener('resize', () => resize())\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\n  \n    useFrame(() => {\n      analyser.getByteFrequencyData(audioData)\n      refPlane.current.material.uniforms.iTime.value += 0.015\n      refPlane.current.material.uniforms.iChannel0.value.needsUpdate = true\n    })\n  \n      return (\n      <Plane ref={refPlane} args={[15, 15]}>  \n        <shaderMaterial args={[{uniforms, fragmentShader: shader}]}/>\n      </Plane>\n    )\n  })\n\nexport default AudioPlane","import { useState, useEffect, useRef } from \"react\"\nimport { Canvas } from \"@react-three/fiber\"\nimport AudioPlane from \"./AudioPlane\"\nimport './App.css'\n\nconst App = () => {\n  const visualNumber = useRef(11)\n  const refPlane = useRef(null)\n  const [shader, setShader] = useState()\n\n  const getVisual = async(n) => {\n    const response = await fetch (`./${n}.json`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    })\n    const data = await response.json()\n    return data.shader\n  }\n  \n  const changeVisual = async(e) => {\n    const newNumber = visualNumber.current + parseInt(e.target.value)\n    if (newNumber < 1 || newNumber > 16) { return }\n    visualNumber.current = newNumber\n    setShader(await getVisual(newNumber))\n  } \n\n  const sleep = ms => (\n    new Promise((resolve) => setTimeout(resolve, ms))\n  )\n\n  const rapidChange = async () => {\n    if (visualNumber.current === 1) { return }\n    const previousShader = await getVisual(visualNumber.current - 1)\n    for (let i = 0; i < 100; i++) {\n      refPlane.current.material.fragmentShader = previousShader\n      refPlane.current.material.needsUpdate = true\n      await sleep(6)\n      refPlane.current.material.fragmentShader = shader\n      refPlane.current.material.needsUpdate = true\n      await sleep(6)\n    }\n  }\n\n  const getInitialShader = async () => {\n    const initialShader = await getVisual(visualNumber.current)\n    setShader(initialShader)\n  }\n  \n  useEffect(() => {\n    getInitialShader()\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      <div id=\"next\">\n        <button onClick={changeVisual} value={1}>\n          Next\n        </button>\n        <button onClick={rapidChange} value={1}>\n          rapid\n        </button>\n      </div>\n\n      <div id=\"prev\">\n        <button onClick={changeVisual} value={-1}>\n          Previous\n        </button>\n      </div>\n\n      <Canvas id=\"fiberCanvas\" >\n        { shader && <AudioPlane ref={refPlane} shader={shader} /> }\n      </Canvas>   \n    </>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}