{"version":3,"sources":["App.js","AudioPlane.js","reportWebVitals.js","index.js"],"names":["audioCtx","analyser","audioData","AudioPlane","forwardRef","refPlane","shader","uniforms","useRef","iTime","value","iResolution","THREE","iChannel0","iChannel1","iChannel2","iChannel3","current","fftSize","resize","canvas","document","getElementById","set","offsetWidth","offsetHeight","useEffect","window","addEventListener","useFrame","getByteFrequencyData","material","needsUpdate","ref","args","fragmentShader","App","visualNumber","useState","setShader","mic","setMic","getVisual","n","a","fetch","headers","Accept","response","json","data","changeVisual","e","newNumber","parseInt","target","sleep","ms","Promise","resolve","setTimeout","rapidChange","previousShader","i","getInitialShader","initialShader","id","onClick","AudioContext","createAnalyser","Uint8Array","frequencyBinCount","navigator","mediaDevices","getUserMedia","audio","then","stream","createMediaStreamSource","connect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1a0e15d1.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\"\nimport { Canvas } from \"@react-three/fiber\"\nimport AudioPlane from \"./AudioPlane\"\nimport './App.css'\n\nlet audioCtx, analyser, audioData, source = undefined \n\nconst App = () => {\n  const visualNumber = useRef(11)\n  const refPlane = useRef(null)\n  const [shader, setShader] = useState()\n  const [mic, setMic] = useState(false)\n\n  const getMicro = () => {\n    if (mic) {return}\n    audioCtx = new AudioContext()\n    analyser = audioCtx.createAnalyser()\n    audioData = new Uint8Array(analyser.frequencyBinCount)\n    navigator.mediaDevices.getUserMedia({audio: true})\n      .then(stream => {\n          source = audioCtx.createMediaStreamSource(stream)\n          source.connect(analyser)\n        })\n    setMic(true)\n  }\n\n  const getVisual = async(n) => {\n    const response = await fetch (`./${n}.json`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    })\n    const data = await response.json()\n    return data.shader\n  }\n  \n  const changeVisual = async(e) => {\n    const newNumber = visualNumber.current + parseInt(e.target.value)\n    if (newNumber < 1 || newNumber > 16) { return }\n    visualNumber.current = newNumber\n    setShader(await getVisual(newNumber))\n    \n  } \n\n  const sleep = ms => (\n    new Promise((resolve) => setTimeout(resolve, ms))\n  )\n\n  const rapidChange = async () => {\n    if (visualNumber.current === 1) { return }\n    const previousShader = await getVisual(visualNumber.current - 1)\n    for (let i = 0; i < 100; i++) {\n      refPlane.current.material.fragmentShader = previousShader\n      refPlane.current.material.needsUpdate = true\n      await sleep(6)\n      refPlane.current.material.fragmentShader = shader\n      refPlane.current.material.needsUpdate = true\n      await sleep(6)\n    }\n  }\n\n  const getInitialShader = async () => {\n    const initialShader = await getVisual(visualNumber.current)\n    setShader(initialShader)\n  }\n  \n  useEffect(() => {\n    getInitialShader()\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      <div id=\"next\">\n        <button onClick={changeVisual} value={1}>\n          Next\n        </button>\n        <button onClick={rapidChange} value={1}>\n          rapid\n        </button>\n        {!audioCtx && <button onClick={getMicro} >\n          Mic\n        </button>}\n      </div>\n\n      <div id=\"prev\">\n        <button onClick={changeVisual} value={-1}>\n          Previous\n        </button>\n      </div>\n\n      <Canvas id=\"fiberCanvas\" >\n        { shader &&\n          <AudioPlane \n            ref={refPlane} \n            shader={shader}\n            analyser={analyser}\n            audioData={audioData}\n          /> }\n      </Canvas>   \n    </>\n  )\n}\n\nexport default App","import { useEffect, useRef, forwardRef } from \"react\"\nimport * as THREE from \"three\"\nimport { useFrame } from \"@react-three/fiber\"\nimport { Plane, shaderMaterial } from \"@react-three/drei\"\n\nconst AudioPlane = forwardRef(({shader, analyser, audioData}, refPlane) => { \n\n  const uniforms = useRef({\n    iTime: { value: 0 },\n    iResolution: { value: new THREE.Vector3() },\n    iChannel0: { value: new THREE.DataTexture()},\n    iChannel1: { value: new THREE.DataTexture() },\n    iChannel2: { value: new THREE.DataTexture() },\n    iChannel3: { value: new THREE.DataTexture() }\n    })\n  \n  if (analyser) {\n    uniforms.current.iChannel0 = {\n      value: new THREE.DataTexture(\n      audioData,\n      analyser.fftSize / 8,\n      1,\n      THREE.LuminanceFormat\n      )\n    }\n    uniforms.current.iChannel1 = {\n      value: new THREE.DataTexture(\n      audioData,\n      analyser.fftSize / 8,\n      1,\n      THREE.LuminanceFormat\n      )\n    }\n    uniforms.current.iChannel2 = {\n      value: new THREE.DataTexture(\n      audioData,\n      analyser.fftSize / 8,\n      1,\n      THREE.LuminanceFormat\n      )\n    }\n    uniforms.current.iChannel3 = {\n      value: new THREE.DataTexture(\n      audioData,\n      analyser.fftSize / 8,\n      1,\n      THREE.LuminanceFormat\n    )\n    }\n  }\n  \n  const resize = () => {\n      const canvas = document.getElementById('fiberCanvas')\n      uniforms.current.iResolution.value.set(canvas.offsetWidth, canvas.offsetHeight, 1)\n    }\n  \n  useEffect(() => { \n    resize()\n    window.addEventListener('resize', () => resize())\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n  \n  useFrame(() => {\n    analyser?.getByteFrequencyData(audioData)\n    refPlane.current.material.uniforms.iTime.value += 0.015\n    refPlane.current.material.uniforms.iChannel0.value.needsUpdate = true\n  })\n  \n  return (\n    <Plane ref={refPlane} args={[15, 15]}>  \n      <shaderMaterial args={[{uniforms: uniforms.current, fragmentShader: shader}]}/>\n    </Plane>\n  )\n})\n\nexport default AudioPlane","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}